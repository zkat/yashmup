* TODO The road to 0.1:
** DONE Write bullet-generators
  Right now, I think it might be a good idea for bullet-generators to just be invisible
  game objects that are configured to shoot *one* bullet, in *one* angle. The bullet storms
  can then be elegantly generated by creating several bullet-generators firing in different
  angles, and then making them all fire many times.

** TODO Clean up resources
   This involves going through all the sprites I have so far, renaming the ones
   I want to something sane, and putting them into appropriate folders. Since the
   resource loading mechanism accepts a string, I can always prepend resources with
   directory/foo.gif, etc.

** TODO Rewrite path-related stuff so that it loads in other computers
   Update 4/1: What I have right now seems to solve the issue right now. Should be cleaned up.
   
** TODO Turn it into a game
*** DONE Player needs to have lives
*** DONE Something needs to happen when player dies
*** DONE Add game over menu
*** TODO Add you win screen when player kills boss
*** TODO Add mechanism for scoring
*** TODO Add powerups
* TODO Beyond 0.1:
** TODO Sprites
*** Animated Sprites
     Implement an animated-sprite class first. Test it thoroughly, then consider
     integrating the changes directly into the regular sprite class.

*** Sprite zooming
     This would be good both for fogo's thing and for the game itself.

*** Improve collision detection
     Collision detection is horrible and slow right now. Fix that shit.

** TODO Background
    The background should be layered, with different layers at different speeds.

** TODO Level stuff
   I'm still confused about how to handle levels, I think. Should there be multiple levels is a
   single game? Should there be a globally accessible *level*? Should the level also be the game
   frame?
   
** TODO Document/comment more
** TODO Create a game frame, adapt code
    Right now, the game frame takes up the entire SDL screen. Some stuff inside the game gets
    dimensions on where to go and what's what by directly accessing *screen-width* and
    *screen-height*. This should be changed such that those variables are replaced by slots in the
    game class that contain the dimensions of the game view frame. This will allow me to use the rest
    of the screen as GUI/HUD space.
    
** TODO Improve level-scripting system
*** Better macro(s)
    I improved the fork macro a bit, but it may need to be wrapped in another macro,
    or partially rewritten, if it's going to not suck balls. The *level* thing is really
    annoying, and definitely not the nice way to do it.

*** Is there a better way to load up the level scripts?
    So far, I'm sort of stuck on this. The problem is that load-level simply LOADs a file
    right now, but load-level needs to actually returned a full level object. READing and EVALing
    each line is a possible option, but that's pretty nasty, and not horribly different from
    LOADing. The current approach is to have all the FORKs inside the level script send the events
    to a special *level* variable declared inside load-level. There are issues with the way
    closing over the lexical environment works and stuff. Gahhh.
    
