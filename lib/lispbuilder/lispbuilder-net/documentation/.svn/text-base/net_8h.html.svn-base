<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>net.h File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.2 -->
<h1>net.h File Reference</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#1326d22ab05a21c50f2be3b8e3c869ab">NET_API</a></td></tr>

<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef void(*)&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> (int socket)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Signature of the callback functions.  <a href="#1d7df3ddb40920ac51c4340f72485474"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Enumerations</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom">{ <br>
&nbsp;&nbsp;<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b991065f0b43d19417096aa0f835cfb28">NET_STARTUP_FAILED</a> = 1, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b3d14193ba0c1feef78639798a51ce8ff">NET_CLEANUP_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55ba58e481ca217e16e09b0da026f202094">NET_BIND_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55bea2d324aaa42a98d0e56d3f5aae40623">NET_CREATE_SOCKET_FAILED</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55bf50fe39b35f105e3873d25801cccfe22">NET_GET_HOST_BY_NAME_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b9c82cdf9098c5913be75ab9672b19cb8">NET_LISTEN_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55bcf7904dea2534717cc9865f30b42ecdd">NET_ACCEPT_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b12f5e6fa5ffc1a56b9ba64268355673c">NET_CLOSE_SOCKET_FAILED</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b383ae77aa3ab021caf4b88d78557593a">NET_CONNECT_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55bd1f971c8e37e0f364b83960b7315333e">NET_WOULD_BLOCK</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55bf175e8a1a55955a6f7edd0ff4570534d">NET_WRITE_FAILED</a>, 
<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b1f7d47f04a58e990b9709029feb13e55">NET_READ_FAILED</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b4a4a81b3ed3ce371008c9a03e2a4de29">NET_LOOP_FAILED</a>
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Possible error codes.  <a href="net_8h.html#06fc87d81c62e9abb8790b6e5713c55b">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#3265fafe9e41db9e0b97f85ee32f5d03">netRegisterReadCallback</a> (<a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> callback)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Register callback for read events.  <a href="#3265fafe9e41db9e0b97f85ee32f5d03"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#b6b0250f44dfe36b3322ac04d93530b0">netRegisterWriteCallback</a> (<a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> callback)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Register callback for write events.  <a href="#b6b0250f44dfe36b3322ac04d93530b0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#68ad57cff39cc6945c167d10669b87c2">netRegisterErrorCallback</a> (<a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> callback)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Register callback for write events.  <a href="#68ad57cff39cc6945c167d10669b87c2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#0e07e655d40c25efd79ea0f4a841c64b">netStartup</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initialize the network system.  <a href="#0e07e655d40c25efd79ea0f4a841c64b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#44d06e09c6368711e94cc09033545871">netCleanup</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shutdown the network system.  <a href="#44d06e09c6368711e94cc09033545871"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#6f9810093dbb13da5b6ee0ef3dcebe08">netCreateSocket</a> (int *socketHandle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create an outgoing socket.  <a href="#6f9810093dbb13da5b6ee0ef3dcebe08"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#a62a0d3e7414050208c994834b2ad7b0">netCreateServerSocket</a> (const char *address, int port, int *socketHandle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create and bind a server socket (if address is NULL, bind to any address).  <a href="#a62a0d3e7414050208c994834b2ad7b0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#a7c750bb458bc42f4abe44ac06d70f34">netListen</a> (int serverSocket, int backlog)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start listening on a server socket.  <a href="#a7c750bb458bc42f4abe44ac06d70f34"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#f9e4c455c069bf85f22d48566cd50b13">netConnect</a> (int socket, const char *address, int port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Connect to the specified address and port.  <a href="#f9e4c455c069bf85f22d48566cd50b13"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#1aed7539180de52bac690fcf0c6a1df5">netAccept</a> (int serverSocket, char **ipAddress, int *socketHandle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Can be called on the accept callback to accept an incoming connection.  <a href="#1aed7539180de52bac690fcf0c6a1df5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#ddff33e129108fff71755ed5c1b84e11">netCloseSocket</a> (int socket)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Close a socket.  <a href="#ddff33e129108fff71755ed5c1b84e11"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#7b984bcd47556a2e661e05e37877c60b">netWait</a> (int millisecondsTimeout)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Wait for an event or timeout.  <a href="#7b984bcd47556a2e661e05e37877c60b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#29d23bb18fb5618545a63b4e76dc30e6">netWrite</a> (int socket, const void *data, int size)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write to a socket.  <a href="#29d23bb18fb5618545a63b4e76dc30e6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#8b3dd9c82c1dc111bcca96831cc85602">netRead</a> (int socket, void *data, int size)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read from a socket.  <a href="#8b3dd9c82c1dc111bcca96831cc85602"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#e3c3fb469a9727c7472328601264ae20">netSleep</a> (int milliseconds)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sleep for the specified time in milliseconds.  <a href="#e3c3fb469a9727c7472328601264ae20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#2d45bd01c7effabd625be5884661df22">netFree</a> (void *pointer)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free memory, which was created by this library, e.g. the IP address in netAccept.  <a href="#2d45bd01c7effabd625be5884661df22"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#51f00a8a2966e5e3e455196e11bf43c7">g_readCallback</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#09ce91344702a8f6b4f0755e3046c4e6">g_writeCallback</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">NET_API <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="net_8h.html#8a33543cdb606f2600d510e62716ede4">g_errorCallback</a></td></tr>

</table>
<hr><h2>Define Documentation</h2>
<a class="anchor" name="1326d22ab05a21c50f2be3b8e3c869ab"></a><!-- doxytag: member="net.h::NET_API" ref="1326d22ab05a21c50f2be3b8e3c869ab" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NET_API          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Typedef Documentation</h2>
<a class="anchor" name="1d7df3ddb40920ac51c4340f72485474"></a><!-- doxytag: member="net.h::SocketEventCallback" ref="1d7df3ddb40920ac51c4340f72485474" args="(int socket)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(*) <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>(int socket)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Signature of the callback functions. 
<p>

</div>
</div><p>
<hr><h2>Enumeration Type Documentation</h2>
<a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b"></a><!-- doxytag: member="net.h::@0" ref="06fc87d81c62e9abb8790b6e5713c55b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Possible error codes. 
<p>
Every function, which returns an int, returns a value &gt;= 0, or a value &lt; 0 for errors (use -NET_CONSTANT for the error value). NET_WOULD_BLOCK is not an error, but an information. <dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b991065f0b43d19417096aa0f835cfb28"></a><!-- doxytag: member="NET_STARTUP_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b991065f0b43d19417096aa0f835cfb28" args="" -->NET_STARTUP_FAILED</em>&nbsp;</td><td>
netStartup failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b3d14193ba0c1feef78639798a51ce8ff"></a><!-- doxytag: member="NET_CLEANUP_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b3d14193ba0c1feef78639798a51ce8ff" args="" -->NET_CLEANUP_FAILED</em>&nbsp;</td><td>
netCleanup failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55ba58e481ca217e16e09b0da026f202094"></a><!-- doxytag: member="NET_BIND_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55ba58e481ca217e16e09b0da026f202094" args="" -->NET_BIND_FAILED</em>&nbsp;</td><td>
bind in netCreateServerSocket failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55bea2d324aaa42a98d0e56d3f5aae40623"></a><!-- doxytag: member="NET_CREATE_SOCKET_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55bea2d324aaa42a98d0e56d3f5aae40623" args="" -->NET_CREATE_SOCKET_FAILED</em>&nbsp;</td><td>
Socket creation in netCreateSocket or netCreateServerSocket failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55bf50fe39b35f105e3873d25801cccfe22"></a><!-- doxytag: member="NET_GET_HOST_BY_NAME_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55bf50fe39b35f105e3873d25801cccfe22" args="" -->NET_GET_HOST_BY_NAME_FAILED</em>&nbsp;</td><td>
Host name lookup failed in netConnect or netCreateServerSocket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b9c82cdf9098c5913be75ab9672b19cb8"></a><!-- doxytag: member="NET_LISTEN_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b9c82cdf9098c5913be75ab9672b19cb8" args="" -->NET_LISTEN_FAILED</em>&nbsp;</td><td>
netListen failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55bcf7904dea2534717cc9865f30b42ecdd"></a><!-- doxytag: member="NET_ACCEPT_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55bcf7904dea2534717cc9865f30b42ecdd" args="" -->NET_ACCEPT_FAILED</em>&nbsp;</td><td>
netAccept failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b12f5e6fa5ffc1a56b9ba64268355673c"></a><!-- doxytag: member="NET_CLOSE_SOCKET_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b12f5e6fa5ffc1a56b9ba64268355673c" args="" -->NET_CLOSE_SOCKET_FAILED</em>&nbsp;</td><td>
netCloseSocket failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b383ae77aa3ab021caf4b88d78557593a"></a><!-- doxytag: member="NET_CONNECT_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b383ae77aa3ab021caf4b88d78557593a" args="" -->NET_CONNECT_FAILED</em>&nbsp;</td><td>
netConnect failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55bd1f971c8e37e0f364b83960b7315333e"></a><!-- doxytag: member="NET_WOULD_BLOCK" ref="06fc87d81c62e9abb8790b6e5713c55bd1f971c8e37e0f364b83960b7315333e" args="" -->NET_WOULD_BLOCK</em>&nbsp;</td><td>
netRead or netWrite result. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55bf175e8a1a55955a6f7edd0ff4570534d"></a><!-- doxytag: member="NET_WRITE_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55bf175e8a1a55955a6f7edd0ff4570534d" args="" -->NET_WRITE_FAILED</em>&nbsp;</td><td>
netWrite failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b1f7d47f04a58e990b9709029feb13e55"></a><!-- doxytag: member="NET_READ_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b1f7d47f04a58e990b9709029feb13e55" args="" -->NET_READ_FAILED</em>&nbsp;</td><td>
netRead failed. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="06fc87d81c62e9abb8790b6e5713c55b4a4a81b3ed3ce371008c9a03e2a4de29"></a><!-- doxytag: member="NET_LOOP_FAILED" ref="06fc87d81c62e9abb8790b6e5713c55b4a4a81b3ed3ce371008c9a03e2a4de29" args="" -->NET_LOOP_FAILED</em>&nbsp;</td><td>
netLoop failed. </td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="1aed7539180de52bac690fcf0c6a1df5"></a><!-- doxytag: member="net.h::netAccept" ref="1aed7539180de52bac690fcf0c6a1df5" args="(int serverSocket, char **ipAddress, int *socketHandle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netAccept           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>serverSocket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&nbsp;</td>
          <td class="paramname"> <em>ipAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>socketHandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Can be called on the accept callback to accept an incoming connection. 
<p>

</div>
</div><p>
<a class="anchor" name="44d06e09c6368711e94cc09033545871"></a><!-- doxytag: member="net.h::netCleanup" ref="44d06e09c6368711e94cc09033545871" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netCleanup           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Shutdown the network system. 
<p>

</div>
</div><p>
<a class="anchor" name="ddff33e129108fff71755ed5c1b84e11"></a><!-- doxytag: member="net.h::netCloseSocket" ref="ddff33e129108fff71755ed5c1b84e11" args="(int socket)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netCloseSocket           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>socket</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Close a socket. 
<p>

</div>
</div><p>
<a class="anchor" name="f9e4c455c069bf85f22d48566cd50b13"></a><!-- doxytag: member="net.h::netConnect" ref="f9e4c455c069bf85f22d48566cd50b13" args="(int socket, const char *address, int port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netConnect           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>socket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Connect to the specified address and port. 
<p>

</div>
</div><p>
<a class="anchor" name="a62a0d3e7414050208c994834b2ad7b0"></a><!-- doxytag: member="net.h::netCreateServerSocket" ref="a62a0d3e7414050208c994834b2ad7b0" args="(const char *address, int port, int *socketHandle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netCreateServerSocket           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>socketHandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create and bind a server socket (if address is NULL, bind to any address). 
<p>

</div>
</div><p>
<a class="anchor" name="6f9810093dbb13da5b6ee0ef3dcebe08"></a><!-- doxytag: member="net.h::netCreateSocket" ref="6f9810093dbb13da5b6ee0ef3dcebe08" args="(int *socketHandle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netCreateSocket           </td>
          <td>(</td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>socketHandle</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create an outgoing socket. 
<p>

</div>
</div><p>
<a class="anchor" name="2d45bd01c7effabd625be5884661df22"></a><!-- doxytag: member="net.h::netFree" ref="2d45bd01c7effabd625be5884661df22" args="(void *pointer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API void netFree           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>pointer</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Free memory, which was created by this library, e.g. the IP address in netAccept. 
<p>
This function is neccessary, because memory allocated by this library could be incompatible with the memory system used by programs which links this library. 
</div>
</div><p>
<a class="anchor" name="a7c750bb458bc42f4abe44ac06d70f34"></a><!-- doxytag: member="net.h::netListen" ref="a7c750bb458bc42f4abe44ac06d70f34" args="(int serverSocket, int backlog)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netListen           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>serverSocket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>backlog</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Start listening on a server socket. 
<p>

</div>
</div><p>
<a class="anchor" name="8b3dd9c82c1dc111bcca96831cc85602"></a><!-- doxytag: member="net.h::netRead" ref="8b3dd9c82c1dc111bcca96831cc85602" args="(int socket, void *data, int size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netRead           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>socket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Read from a socket. 
<p>
There are four possible cases (result: returned value from this function) :<ul>
<li>result&gt;0: "result" number of bytes has been read successfully.</li><li>result=0: The connection has been closed.</li><li>result=NET_WOULD_BLOCK: No data has been received, more data can be received when notified by the next read callback.</li><li>result=NET_READ_FAILED: An error occured while reading from the socket. </li></ul>

</div>
</div><p>
<a class="anchor" name="68ad57cff39cc6945c167d10669b87c2"></a><!-- doxytag: member="net.h::netRegisterErrorCallback" ref="68ad57cff39cc6945c167d10669b87c2" args="(SocketEventCallback callback)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API void netRegisterErrorCallback           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>&nbsp;</td>
          <td class="paramname"> <em>callback</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register callback for write events. 
<p>
The callback is called on error, e.g. netConnect timeout. 
</div>
</div><p>
<a class="anchor" name="3265fafe9e41db9e0b97f85ee32f5d03"></a><!-- doxytag: member="net.h::netRegisterReadCallback" ref="3265fafe9e41db9e0b97f85ee32f5d03" args="(SocketEventCallback callback)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API void netRegisterReadCallback           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>&nbsp;</td>
          <td class="paramname"> <em>callback</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register callback for read events. 
<p>
The callback is called when data can be read without blocking or when an incoming connection for a server socket can be accepted. 
</div>
</div><p>
<a class="anchor" name="b6b0250f44dfe36b3322ac04d93530b0"></a><!-- doxytag: member="net.h::netRegisterWriteCallback" ref="b6b0250f44dfe36b3322ac04d93530b0" args="(SocketEventCallback callback)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API void netRegisterWriteCallback           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a>&nbsp;</td>
          <td class="paramname"> <em>callback</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register callback for write events. 
<p>
The callback is called when a socket was connected or when it is possible to write more data with netWrite. 
</div>
</div><p>
<a class="anchor" name="e3c3fb469a9727c7472328601264ae20"></a><!-- doxytag: member="net.h::netSleep" ref="e3c3fb469a9727c7472328601264ae20" args="(int milliseconds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API void netSleep           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>milliseconds</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sleep for the specified time in milliseconds. 
<p>

</div>
</div><p>
<a class="anchor" name="0e07e655d40c25efd79ea0f4a841c64b"></a><!-- doxytag: member="net.h::netStartup" ref="0e07e655d40c25efd79ea0f4a841c64b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netStartup           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize the network system. 
<p>

</div>
</div><p>
<a class="anchor" name="7b984bcd47556a2e661e05e37877c60b"></a><!-- doxytag: member="net.h::netWait" ref="7b984bcd47556a2e661e05e37877c60b" args="(int millisecondsTimeout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netWait           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>millisecondsTimeout</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Wait for an event or timeout. 
<p>

</div>
</div><p>
<a class="anchor" name="29d23bb18fb5618545a63b4e76dc30e6"></a><!-- doxytag: member="net.h::netWrite" ref="29d23bb18fb5618545a63b4e76dc30e6" args="(int socket, const void *data, int size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API int netWrite           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>socket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write to a socket. 
<p>
There are three possible cases (result: returned value from this function) :<ul>
<li>result&gt;=0: "result" number of bytes has been sent successfully.</li><li>result=NET_WOULD_BLOCK and sent&gt;0: Some data has been sent, more data can be sent when notified by the next write callback.</li><li>result=NET_WRITE_FAILED: An error occured while writing to the socket, e.g. the socket is not connected. </li></ul>

</div>
</div><p>
<hr><h2>Variable Documentation</h2>
<a class="anchor" name="8a33543cdb606f2600d510e62716ede4"></a><!-- doxytag: member="net.h::g_errorCallback" ref="8a33543cdb606f2600d510e62716ede4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> <a class="el" href="net_8h.html#8a33543cdb606f2600d510e62716ede4">g_errorCallback</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="51f00a8a2966e5e3e455196e11bf43c7"></a><!-- doxytag: member="net.h::g_readCallback" ref="51f00a8a2966e5e3e455196e11bf43c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> <a class="el" href="net_8h.html#51f00a8a2966e5e3e455196e11bf43c7">g_readCallback</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="09ce91344702a8f6b4f0755e3046c4e6"></a><!-- doxytag: member="net.h::g_writeCallback" ref="09ce91344702a8f6b4f0755e3046c4e6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">NET_API <a class="el" href="net_8h.html#1d7df3ddb40920ac51c4340f72485474">SocketEventCallback</a> <a class="el" href="net_8h.html#09ce91344702a8f6b4f0755e3046c4e6">g_writeCallback</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 18 00:18:44 2007 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2 </small></address>
</body>
</html>
